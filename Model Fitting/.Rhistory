library(ape) #phylog
library(caper)
library(phytools)
bird_tree <- read.tree("data/all_birds.tre")
bird_tree <- read.tree("..data/BCB/all_birds.tre")
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
accip_tree <- drop.tip(bird_tree, drop_tips)
accip_comp <- comparative.data(phy = accip_tree, data = accip_data, names.col = "jetz_name")
protree <- drop.tip(bird_tree, drop_tips)
accip_comp <- comparative.data(phy = protree, data = procell, names.col = "jetz_name")
accip_comp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
promodel <- lm(range_size ~ abs_latitude, data=procella)
summary(promodel)
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
promodel <- lm(range_size ~ abs_latitude, data=procella)
summary(promodel)
prosizemodel <- lm(log_BM ~ abs_latitude, data=procella)
procella$log_BM <- log(procella$body_mass)
View(procella)
procella$log_BM <- log(procella$mass)
prosizemodel <- lm(log_BM ~ abs_latitude, data=procella)
summary(prosizemodel)
prosizepgls <- pgls(log_BM ~ abs_latitude, data=procomp, lambda="ML")
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
prosizepgls <- pgls(log_BM ~ abs_latitude, data=procomp, lambda="ML")
summary(prosizepgls)
citation("caper")
prorangepgls <- pgls(range_size ~ abs_latitude, data=procomp, lambda="ML")
summary(prorangepgls)
summary(propgls)
range <- seq(0,90,by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- as.numberic(as.character(procella$lat.bins))
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
species_richness <- count(procella, lat.bins)
citation("dplyr")
library(dplyr)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
species_richness
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
summary(accip_model)
View(species_richness)
View(procella)
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
prorangelm <- lm(range_size ~ abs_latitude, data=procella)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
prorangelm <- lm(range_size ~ abs_latitude, data=procella)
summary(prorangelm)
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
library(ggplot2)
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
procella$log_BM <- log(procella$mass)
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
bodyscatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log body mass (g)") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
bodyscatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size (km^2)") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab = ("Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
ylab(bquote("Log Range Size")(km^2))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
ylab("Log range size (km^2)")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
ylab("Log range size (km"^2")")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('Log range size (km'~(^2)')'), x = "Absolute latitude")
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('Log range size (km'~(^2)), x = "Absolute latitude")
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('x axis'~(Ã…^2)), y = "y axis")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "absolute latitude")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
procella$log_Range <- log(procella$range_size)
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(log_Range ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
prorangelm <- lm(log_Range ~ abs_latitude, data=procella)
summary(prorangelm)
summary(propgls)
summary(prorangelm)
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
range <- seq(0,90,by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
library(dplyr)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
summary(accip_model)
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
plot(S_data, V_data)
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
summary(MM_model)
confint(MM_model)
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
#V = VMAXS/KM+S
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
confint(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model)
coef(MM_model2)
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
#plot fit
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
MM_model4 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12.96, K_M = 10.61))
> install.packages("minpack.lm")
install.packages("minpack.lm")
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
coef(MM_model5)
MM_model6 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
MM_model7 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
MM_model8 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1), lower=c(0.4,0.4), upper=c(100,100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start =  list(V_max = 0.5, K_M = 0.5), lower=c(0.4,0.4), upper=c(20,20))
hist(residuals(MM_model6))
MyData <- read.csv("../data/GenomeSize.csv") # using relative path assuming that your working directory is "code"
head(MyData)
Data2Fit <- subset(MyData,Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight, xlab = "Body Length", ylab = "Body Weight")
library("ggplot2")
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) +
geom_point(size = (3),color="red") + theme_bw() +
labs(y="Body mass (mg)", x = "Wing length (mm)")
nrow(Data2Fit)
PowFit <- nlsLM(BodyWeight ~ a * TotalLength^b, data = Data2Fit, start = list(a = .1, b = .1))
powMod <- function(x, a, b) {
return(a * x^b)
}
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength,a,b), data = Data2Fit, start = list(a = .1, b = .1))
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200)
coef(PowFit)["a"]
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths,coef(PowFit)["a"],coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
summary(PowFit)
print(confint(PowFit))
hist(residuals(PowFit))
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
source("~/GitHub/CMEECoursework/Model Fitting/ModelFitting.R")
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
confint(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model)
coef(MM_model2)
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
#plot fit
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
MM_model4 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12.96, K_M = 10.61))
install.packages("minpack.lm")
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
coef(MM_model5)
MM_model6 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
MM_model7 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
MM_model8 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
Data2Fit <- subset(MyData,Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
source("~/GitHub/CMEECoursework/Model Fitting/ModelFitting.R")
require("here")
require("here")
here:here
here::here()
setwd("~/GitHub/CMEECoursework/Model Fitting")
setwd("~/GitHub/CMEECoursework/Model Fitting")
#plot fit
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
MM_model4 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12.96, K_M = 10.61))
install.packages("minpack.lm")
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
#install.packages("minpack.lm")
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
coef(MM_model5)
MM_model6 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
MM_model7 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
MM_model8 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1), lower=c(0.4,0.4), upper=c(100,100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start =  list(V_max = 0.5, K_M = 0.5), lower=c(0.4,0.4), upper=c(20,20))
hist(residuals(MM_model6))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1), lower=c(0.4,0.4), upper=c(100,100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start =  list(V_max = 0.5, K_M = 0.5), lower=c(0.4,0.4), upper=c(20,20))
hist(residuals(MM_model6))
MyData <- read.csv("../data/GenomeSize.csv") # using relative path assuming that your working directory is "code"
MyData <- read.csv("data/GenomeSize.csv") # using relative path assuming that your working directory is "code"
head(MyData)
Data2Fit <- subset(MyData,Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight, xlab = "Body Length", ylab = "Body Weight")
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) +
geom_point(size = (3),color="red") + theme_bw() +
labs(y="Body mass (mg)", x = "Wing length (mm)")
nrow(Data2Fit)
PowFit <- nlsLM(BodyWeight ~ a * TotalLength^b, data = Data2Fit, start = list(a = .1, b = .1))
library("ggplot2")
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) +
geom_point(size = (3),color="red") + theme_bw() +
labs(y="Body mass (mg)", x = "Wing length (mm)")
nrow(Data2Fit)
PowFit <- nlsLM(BodyWeight ~ a * TotalLength^b, data = Data2Fit, start = list(a = .1, b = .1))
powMod <- function(x, a, b) {
return(a * x^b)
}
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength,a,b), data = Data2Fit, start = list(a = .1, b = .1))
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200)
coef(PowFit)["a"]
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths,coef(PowFit)["a"],coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
summary(PowFit)
print(confint(PowFit))
hist(residuals(PowFit))
t <- seq(0, 22, 2)
N <- c(32500, 33000, 38000, 105000, 445000, 1430000, 3020000, 4720000, 5670000, 5870000, 5930000, 5940000)
set.seed(1234) # To ensure we always get the same random sequence in this example "dataset"
data <- data.frame(t, N * (1 + rnorm(length(t), sd = 0.1))) # add some random error
names(data) <- c("Time", "N")
head(data)
ggplot(data, aes(x = Time, y = N)) +
geom_point(size = 3) +
labs(x = "Time (Hours)", y = "Population size (cells)")
data$LogN <- log(data$N)
# visualise
ggplot(data, aes(x = t, y = LogN)) +
geom_point(size = 3) +
labs(x = "Time (Hours)", y = "log(cell number)")
(data[data$Time == 10,]$LogN - data[data$Time == 6,]$LogN)/(10-6)
diff(data$LogN)
max(diff(data$LogN))/2 # 2 is the difference in any successive pair of timepoints
lm_growth <- lm(LogN ~ Time, data = data[data$Time > 2 & data$Time < 12,])
summary(lm_growth)
logistic_model <- function(t, r_max, K, N_0){ # The classic logistic equation
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
# first we need some starting parameters for the model
N_0_start <- min(data$N) # lowest population size
K_start <- max(data$N) # highest population size
r_max_start <- 0.62 # use our estimate from the OLS fitting from above
fit_logistic <- nlsLM(N ~ logistic_model(t = Time, r_max, K, N_0), data,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
summary(fit_logistic)
timepoints <- seq(0, 22, 0.1)
logistic_points <- logistic_model(t = timepoints,
r_max = coef(fit_logistic)["r_max"],
K = coef(fit_logistic)["K"],
N_0 = coef(fit_logistic)["N_0"])
df1 <- data.frame(timepoints, logistic_points)
df1$model <- "Logistic equation"
names(df1) <- c("Time", "N", "model")
ggplot(data, aes(x = Time, y = N)) +
geom_point(size = 3) +
geom_line(data = df1, aes(x = Time, y = N, col = model), size = 1) +
theme(aspect.ratio=1)+ # make the plot square
labs(x = "Time", y = "Cell number")
ggplot(data, aes(x = Time, y = LogN)) +
geom_point(size = 3) +
geom_line(data = df1, aes(x = Time, y = log(N), col = model), size = 1) +
theme(aspect.ratio=1)+
labs(x = "Time", y = "log(Cell number)")
ggplot(data, aes(x = N, y = LogN)) +
geom_point(size = 3) +
theme(aspect.ratio = 1)+
labs(x = "N", y = "log(N)")
gompertz_model <- function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
N_0_start <- min(data$LogN) # lowest population size, note log scale
K_start <- max(data$LogN) # highest population size, note log scale
r_max_start <- 0.62 # use our previous estimate from the OLS fitting from above
t_lag_start <- data$Time[which.max(diff(diff(data$LogN)))] # find last timepoint of lag phase
diff(data$LogN) # same as what we did above - get differentials
diff(diff(data$LogN)) # get the differentials of the differentials (approx 2nd order derivatives)
which.max(diff(diff(data$LogN))) # find the timepoint where this 2nd order derivative really takes off
fit_gompertz <- nlsLM(LogN ~ gompertz_model(t = Time, r_max, K, N_0, t_lag), data,
list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, K = K_start))
summary(fit_gompertz)
logistic_points <- log(logistic_model(t = timepoints,
r_max = coef(fit_logistic)["r_max"],
K = coef(fit_logistic)["K"],
N_0 = coef(fit_logistic)["N_0"]))
gompertz_points <- gompertz_model(t = timepoints,
r_max = coef(fit_gompertz)["r_max"],
K = coef(fit_gompertz)["K"],
N_0 = coef(fit_gompertz)["N_0"],
t_lag = coef(fit_gompertz)["t_lag"])
df1 <- data.frame(timepoints, logistic_points)
df1$model <- "Logistic model"
names(df1) <- c("Time", "LogN", "model")
df2 <- data.frame(timepoints, gompertz_points)
df2$model <- "Gompertz model"
names(df2) <- c("Time", "LogN", "model")
model_frame <- rbind(df1, df2)
ggplot(data, aes(x = Time, y = LogN)) +
geom_point(size = 3) +
geom_line(data = model_frame, aes(x = Time, y = LogN, col = model), size = 1) +
theme_bw() + # make the background white
theme(aspect.ratio=1)+ # make the plot square
labs(x = "Time", y = "log(Abundance)")
