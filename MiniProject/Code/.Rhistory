geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('x axis'~(Ã…^2)), y = "y axis")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "absolute latitude")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
procella$log_Range <- log(procella$range_size)
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(log_Range ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
prorangelm <- lm(log_Range ~ abs_latitude, data=procella)
summary(prorangelm)
summary(propgls)
summary(prorangelm)
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
range <- seq(0,90,by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
library(dplyr)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
summary(accip_model)
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
plot(S_data, V_data)
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
summary(MM_model)
confint(MM_model)
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
#V = VMAXS/KM+S
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
confint(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model)
coef(MM_model2)
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
#plot fit
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
MM_model4 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12.96, K_M = 10.61))
> install.packages("minpack.lm")
install.packages("minpack.lm")
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
coef(MM_model5)
MM_model6 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
MM_model7 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
MM_model8 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1), lower=c(0.4,0.4), upper=c(100,100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start =  list(V_max = 0.5, K_M = 0.5), lower=c(0.4,0.4), upper=c(20,20))
hist(residuals(MM_model6))
MyData <- read.csv("../data/GenomeSize.csv") # using relative path assuming that your working directory is "code"
head(MyData)
Data2Fit <- subset(MyData,Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight, xlab = "Body Length", ylab = "Body Weight")
library("ggplot2")
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) +
geom_point(size = (3),color="red") + theme_bw() +
labs(y="Body mass (mg)", x = "Wing length (mm)")
nrow(Data2Fit)
PowFit <- nlsLM(BodyWeight ~ a * TotalLength^b, data = Data2Fit, start = list(a = .1, b = .1))
powMod <- function(x, a, b) {
return(a * x^b)
}
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength,a,b), data = Data2Fit, start = list(a = .1, b = .1))
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200)
coef(PowFit)["a"]
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths,coef(PowFit)["a"],coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
summary(PowFit)
print(confint(PowFit))
hist(residuals(PowFit))
library(ggplot2)
setwd("~/GitHub/CMEECoursework/MiniProject/Code")
dataMod <- read.csv("../Data/LogisticGrowthDataMod.csv")
summary(dataMod$PopBio)
dataMod$log_PopBio <- log(dataMod$PopBio)
lm_models <- lapply(split(dataMod, dataMod$PopBio_units), function(subset) {
lm(log_PopBio ~ Time, data = subset)
})
aic_values <- sapply(lm_models, AIC)
bic_values <- sapply(lm_models, BIC)
aic_values
bic_values
ggplot(dataMod, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ PopBio_units) +
labs(title = "Fitting linear models to bacterial logistic growth data")
lm_models <- lapply(split(dataMod, dataMod$PopBio_units), function(subset) {
lm(log_PopBio ~ Time, data = subset)
})
summary(lm_models)
r2_values <- sapply(lm_models, function(model) summary(model)$r.squared)
r2_values
bic_values
aic_values
# CFU  DryWeight          N     OD_595
# 5585.41193   11.58092 7600.53977 6958.07674
summary(dataMod$PopBio)
View(dataMod)
head(dataMod)
gompertz_model <- function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
dataCFU <- subset(dataMod, PopBio_Units == "CFU")
dataCFU <- subset(dataMod, PopBio_Units == "CFU")
dataCFU <- subset(dataMod, PopBio_units == "CFU")
N0_start <- min(dataCFU$Log_PopBio)
summary*dataCFU$Log_PopBio
View(dataCFU)
summary(dataCFU$Log_PopBio)
N0_start <- min(dataCFU$log_PopBio)
K_start <- max(dataCFU$log_PopBio)
summary(lm_models[["CFU"]])
View(lm_models)
#r ~ 0.004963
summary(lm_models[["DryWeight"]])
#r ~ 0.0022569
summary(lm_models[["N"]])
#r ~ -2.871e-04
summary(lm_models[["OD_595"]])
r_max <- coef(lm_models[["CFU"]])["Time"]
logistic_model <- function(t, r_max, K, N_0){ # The classic logistic equation
return(N_0 * K * exp(r_max * t)/(K + N_0 * (exp(r_max * t) - 1)))
}
fit_logistic <- nlsLM(N ~ logistic_model(t = Time, r_max, K, N_0), data,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
install.packages("minpack.lm")
library(minpack.lm)
fit_logistic <- nlsLM(N ~ logistic_model(t = Time, r_max, K, N_0), data,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
fit_logistic <- nlsLM(N ~ logistic_model(t = Time, r_max, K, N_0), dataCFU,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
r_max_start <- coef(lm_models[["CFU"]])["Time"]
fit_logistic <- nlsLM(N ~ logistic_model(t = Time, r_max, K, N_0), dataCFU,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
N_0_start <- min(dataCFU$log_PopBio)
K_start <- max(dataCFU$log_PopBio)
r_max_start <- coef(lm_models[["CFU"]])["Time"]
fit_logistic <- nlsLM(N ~ logistic_model(t = Time, r_max, K, N_0), dataCFU,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
fit_logistic <- nlsLM(log_PopBio ~ logistic_model(t = Time, r_max, K, N_0), dataCFU,
list(r_max=r_max_start, N_0 = N_0_start, K = K_start))
summary(fit_logistic)
N_0_start <- min(dataCFU$log_PopBio)
K_start <- max(dataCFU$log_PopBio)
r_max_start <- coef(lm_models[["CFU"]])["Time"]
t_lag_start <- data$Time[which.max(diff(diff(dataCFU$log_PopBio)))]
t_lag_start <- dataCFU$Time[which.max(diff(diff(dataCFU$log_PopBio)))]
fit_gompertz <- nlsLM(LogN ~ gompertz_model(t = Time, r_max, K, N_0, t_lag), data,
list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, K = K_start))
gompertz_model <- function(t, r_max, K, N_0, t_lag){ # Modified gompertz growth model (Zwietering 1990)
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
fit_gompertz <- nlsLM(LogN ~ gompertz_model(t = Time, r_max, K, N_0, t_lag), dataCFU,
list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, K = K_start))
fit_gompertz <- nlsLM(log_PopBio ~ gompertz_model(t = Time, r_max, K, N_0, t_lag), dataCFU,
list(t_lag=t_lag_start, r_max=r_max_start, N_0 = N_0_start, K = K_start))
summary(fit_logistic)
summary(fit_gompertz)
fit_gompertz <- nlsLM(log_PopBio ~ gompertz_model(t = Time, r_max, K, N_0, t_lag),
data = dataCFU,
start = list(t_lag = t_lag_start,
r_max = r_max_start,
N_0 = N_0_start,
K = K_start),
control = nls.lm.control(maxiter = 500))
summary(fit_gompertz)
fit_gompertz <- nlsLM(log_PopBio ~ gompertz_model(t = Time, r_max, K, N_0, t_lag),
data = dataCFU,
start = list(t_lag = t_lag_start, r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 500))
summary(fit_gompertz)
t_lag_start <- min(dataCFU$Time)
fit_gompertz <- nlsLM(log_PopBio ~ gompertz_model(t = Time, r_max, K, N_0, t_lag),
data = dataCFU,
start = list(t_lag = t_lag_start, r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 100))
summary(fit_gompertz)
QuaFit <- lm(PopBio ~ poly(time,2), data = dataMod)
QuaFit <- lm(PopBio ~ poly(time,2), data = dataMod)
summary(fit_gompertz)
AIC(fit_gompertz)
#import dataset
data <- read.csv("../Data/LogisticGrowthData.csv")
#remove na rows
data <- na.omit(data)
summary(data$PopBio)
#remove negative and small popbio
data <- data[which(data$PopBio >= 0), ]
data <- data[data$PopBio > 1e-5, ]
#create ids
data$ID <- paste(data$Species, data$Medium, data$Temp, data$Citation, sep = "_")
#turn ids numeric
data$ID_num <- as.numeric(factor(data$ID))
write.csv(data, "../Data/LogisticGrowthDataMod.csv", row.names=FALSE)
plot(data)
plot(data$time, data$PopBio)
View(data)
plot(data$Time, data$PopBio)
library(ggplot2)
ggplot(data, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
facet_wrap(~PopBio_units, scales = "free_y") +  # Separate plots for each unit
theme_minimal() +
labs(title = "Bacterial Growth Data by Measurement Unit",
x = "Time", y = "Log(PopBio)")
ggplot(data, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
facet_wrap(~PopBio_units, scales = "free_y") +  # Separate plots for each unit
theme_minimal() +
labs(title = "Bacterial Growth Data by Measurement Unit",
x = "Time", y = "Log(PopBio)")
#create logs
data$log_PopBio <- log(data$PopBio)
#create ids
data$ID <- paste(data$Species, data$Medium, data$Temp, data$Citation, sep = "_")
#turn ids numeric
data$ID_num <- as.numeric(factor(data$ID))
#import dataset
data <- read.csv("../Data/LogisticGrowthData.csv")
#remove na rows
data <- na.omit(data)
summary(data$PopBio)
#remove negative and small popbio
data <- data[which(data$PopBio >= 0), ]
data <- data[data$PopBio > 1e-5, ]
#create logs
data$log_PopBio <- log(data$PopBio)
#create ids
data$ID <- paste(data$Species, data$Medium, data$Temp, data$Citation, sep = "_")
#turn ids numeric
data$ID_num <- as.numeric(factor(data$ID))
write.csv(data, "../Data/LogisticGrowthDataMod.csv", row.names=FALSE)
ggplot(data, aes(x = Time, y = log_opBio, color = PopBio_units)) +
geom_point() +
facet_wrap(~PopBio_units, scales = "free_y") +  # Separate plots for each unit
theme_minimal() +
labs(title = "Bacterial Growth Data by Measurement Unit",
x = "Time", y = "Log(PopBio)")
ggplot(data, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
facet_wrap(~PopBio_units, scales = "free_y") +  # Separate plots for each unit
theme_minimal() +
labs(title = "Bacterial Growth Data by Measurement Unit",
x = "Time", y = "Log(PopBio)")
ggplot(data, aes(x= Time, y=log_PopBio)) +
geom_point() +
labs(theme = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x= Time, y=log_PopBio)) +
geom_point() +
theme_minimal()
ggplot(data, aes(x= Time, y=log_PopBio, color=blue)) +
geom_point() +
theme_minimal()
ggplot(data, aes(x= Time, y=log_PopBio, color=blues9)) +
geom_point() +
theme_minimal()
ggplot(data, aes(x= Time, y=log_PopBio)) +
geom_point() +
theme_minimal()
ggplot(data, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
facet_wrap(~PopBio_units, scales = "free_y") +  # Separate plots for each unit
theme_minimal() +
labs(title = "Bacterial Growth Data by Measurement Unit",
x = "Time", y = "Log(PopBio)")
ggplot(data, aes(x= Time, y=log_PopBio)) +
geom_point() +
theme_minimal()
ggplot(data, aes(x= Time, y=log_PopBio)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x= Time, y=log_PopBio), color = PopBio_units) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x= Time, y=log_PopBio), color = PopBio_units) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
#import dataset
data <- read.csv("../Data/LogisticGrowthData.csv")
View(data)
#import dataset
data <- read.csv("../Data/LogisticGrowthData.csv")
#remove na rows
data <- na.omit(data)
summary(data$PopBio)
#remove negative and small popbio (problematic values)
data <- data[which(data$PopBio >= 0), ]
data <- data[data$PopBio > 1e-5, ]
#create logs
data$log_PopBio <- log(data$PopBio)
#create ids
data$ID <- paste(data$Species, data$Medium, data$Temp, data$Citation, sep = "_")
#turn ids numeric
data$ID <- as.numeric(factor(data$ID))
View(data)
write.csv(data, "../Data/LogisticGrowthDataMod.csv", row.names=FALSE)
data_subset = data[data['ID']=='1']
ggplot(data_subset, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
data_subset = data[data['ID']=='1']
ggplot(data_subset, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
data_subset = data[data['ID']=='2']
data_subset =  subset(data, ID == 1)
ggplot(data_subset, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
View(data_subset)
log(0.080529638)
ggplot(dataMod, aes(x = Time, y = popBio, color = PopBio_units)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ PopBio_units) +
labs(title = "Fitting linear models to bacterial logistic growth data")
ggplot(dataMod, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ PopBio_units) +
labs(title = "Fitting linear models to bacterial logistic growth data")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
data_subset =  subset(data, PopBio_units == OD_595)
data_subset =  subset(data, PopBio_units == OD_595)
data_subset =  subset(data, PopBio_units == OD_595)
View(data)
data_subset =  subset(data, PopBio_units = OD_595)
data_subset =  subset(data, PopBio_units = "OD_595")
data_subset =  subset(data, PopBio_units == "OD_595")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
data_subset =  subset(data, PopBio_units == "DryWeight")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
data_subset =  subset(data, PopBio_units == "CFU")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
View(data_subset)
data_subset =  subset(data, PopBio_units == "N")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data_subset, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
B
ggplot(data_subset, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x = Time, y = log_PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
setwd("~/GitHub/CMEECoursework/MiniProject/Code")
library(ggplot2)
#import dataset
data <- read.csv("../Data/LogisticGrowthData.csv")
#remove na rows
data <- na.omit(data)
summary(data$PopBio)
#remove negative and small popbio (problematic values)
data <- data[which(data$PopBio >= 0), ]
data <- data[data$PopBio > 1e-5, ]
#create logs
data$log_PopBio <- log(data$PopBio)
#create ids
data$ID <- paste(data$Species, data$Medium, data$Temp, data$Citation, sep = "_")
#turn ids numeric
data$ID_num <- as.numeric(factor(data$ID))
write.csv(data, "../Data/LogisticGrowthDataMod.csv", row.names=FALSE)
data_subset =  subset(data, ID == 'Chryseobacterium.balustinum_5_TSB_Bae, Y.M., Zheng, L., Hyun, J.E., Jung, K.S., Heu, S. and Lee, S.Y., 2014. Growth characteristics and biofilm formation of various spoilage bacteria isolated from fresh produce. Journal of food science, 79(10), pp.M2072-M2080.')
ggplot(data, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
View(data)
data_subset = data[data['ID']=='Chryseobacterium.balustinum_5_TSB_Bae, Y.M., Zheng, L., Hyun, J.E., Jung, K.S., Heu, S. and Lee, S.Y., 2014. Growth characteristics and biofilm formation of various spoilage bacteria isolated from fresh produce. Journal of food science, 79(10), pp.M2072-M2080.']
data_subset.head()
data_subset =  subset(data, ID == 'Chryseobacterium.balustinum_5_TSB_Bae, Y.M., Zheng, L., Hyun, J.E., Jung, K.S., Heu, S. and Lee, S.Y., 2014. Growth characteristics and biofilm formation of various spoilage bacteria isolated from fresh produce. Journal of food science, 79(10), pp.M2072-M2080.')
View(data_subset)
data_subset =  subset(data, ID =="Chryseobacterium.balustinum_5_TSB_Bae, Y.M., Zheng, L., Hyun, J.E., Jung, K.S., Heu, S. and Lee, S.Y., 2014. Growth characteristics and biofilm formation of various spoilage bacteria isolated from fresh produce. Journal of food science, 79(10), pp.M2072-M2080.")
data_subset =  subset(data, ID_num == "95")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
data_subset =  subset(data, ID_num == "1")
ggplot(data_subset, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "log(Population)")
ggplot(data, aes(x = Time, y = PopBio, color = PopBio_units)) +
geom_point() +
theme_minimal() +
labs(title = "Bacterial growth data over time", x="Time (hours)", y = "Population")
