procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
# Create a basic plot for data visualisation.
plot(mass ~ abs_latitude, data = procella)
# We'll use a histogram to look at the spread.
hist(procella$mass)
procella$logBM <- log(procella$mass)
hist(procella$logBM)
#Scatter
plot(logBM ~ abs_latitude, data=procella)
#linear model
prolm <- lm(logBM ~ abs_latitude, data=procella)
summary(prolm)
library(raster)
library(sf)
library(dplyr)
load("../data/BCB/Procellariiformes_range_data(1).RData")
head(clade_ranges)
plot(clade_ranges$Shape[1], axes=TRUE)
clade_ranges <- na.omit(clade_ranges)
#Add a column to our data if it's small or large range
procella$range_large <- NA
row_numbers <- 1:nrow(procella)
#Scatterplot of latitude and range size
plot(procella$abs_latitude,procella$range_size)
rapoportmodel <- lm(abs_latitude ~ range_size, data=procella)
summary(rapoportmodel)
#range_size is insignificant (0.46)
#List of colours
colors()
#Scatter plot of absolute latitude against log range size
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
library(ggplot2)
#Scatter plot of absolute latitude against log range size
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
print(rangescatter)
rapoportmodel <- lm(abs_latitude ~ range_size, data=procella)
summary(rapoportmodel)
predictions <- predict(prolm, type = "response", se.fit = TRUE)
# Add the predictions to our dataframe.
species_richness$fit <- predictions$fit
range <- seq(0, 90, by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude, breaks=range,labels=labels)
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
hist(procella$lat.bins, breaks=7)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
species_richness
procella_model2 <- glm(richness ~ lat.bins, data=species_richness, family="poisson")
summary(procella_model2)
ggplot(species_richness, aes(x = lat.bins, y = richness)) + geom_point() +
# Add in the main model line. Turn se off so we add it manually after.
geom_smooth(aes(y = fit), fullrange=FALSE, se = FALSE) +
# Now add the standard errors.
geom_ribbon(aes(ymin = y_min, ymax = y_max), alpha = 0.2, fill = "blue") +
# Add labels.
xlab("Latitude") + ylab("Species Richness") +
# Lastly add a theme to remove the grey background and grid lines.
theme_classic()
range <- seq(0, 90, by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude, breaks=range,labels=labels)
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
hist(procella$lat.bins, breaks=7)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
species_richness
procella_model2 <- glm(richness ~ lat.bins, data=species_richness, family="poisson")
summary(procella_model2)
ggplot(species_richness, aes(x = lat.bins, y = richness)) + geom_point() +
# Add in the main model line. Turn se off so we add it manually after.
geom_smooth(aes(y = fit), fullrange=FALSE, se = FALSE) +
# Now add the standard errors.
geom_ribbon(aes(ymin = y_min, ymax = y_max), alpha = 0.2, fill = "blue") +
# Add labels.
xlab("Latitude") + ylab("Species Richness") +
# Lastly add a theme to remove the grey background and grid lines.
theme_classic()
help(fit)
library(raster)
library(sf)
library(dplyr)
library(ggplot2)
predictions <- predict(prolm, type = "response", se.fit = TRUE)
# Add the predictions to our dataframe.
species_richness$fit <- predictions$fit
predictions <- predict(prolm2, type = "response", se.fit = TRUE)
predictions <- predict(prolm, type = "response", se.fit = TRUE)
# Add the predictions to our dataframe.
species_richness$fit <- predictions$fit
predictions <- predict(procella_model2, type = "response", se.fit = TRUE)
# Add the predictions to our dataframe.
species_richness$fit <- predictions$fit
species_richness$y_max <- predictions$fit + predictions$se.fit
species_richness$y_min <- predictions$fit - predictions$se.fit
procella$linear_fit <- predict(procella_model2,type="response",se.fit=FALSE)
procella_model2 <- glm(richness ~ lat.bins, data=species_richness, family="poisson")
predictions <- predict(procella_model2, type = "response", se.fit = TRUE)
# Add the predictions to our dataframe.
species_richness$fit <- predictions$fit
species_richness$y_max <- predictions$fit + predictions$se.fit
species_richness$y_min <- predictions$fit - predictions$se.fit
procella$linear_fit <- predict(procella_model2,type="response",se.fit=FALSE)
procella$phylo_fit <- predict(pro_pgls, type = "response", se.fit = FALSE)
setwd("~/Imp Stuff/Arrrrrr/Code")
setwd("~/Imp Stuff/Arrrrrr/Code")
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
library(ape) #phylog
library(caper)
library(phytools)
bird_tree <- read.tree("data/all_birds.tre")
bird_tree <- read.tree("..data/BCB/all_birds.tre")
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
accip_tree <- drop.tip(bird_tree, drop_tips)
accip_comp <- comparative.data(phy = accip_tree, data = accip_data, names.col = "jetz_name")
protree <- drop.tip(bird_tree, drop_tips)
accip_comp <- comparative.data(phy = protree, data = procell, names.col = "jetz_name")
accip_comp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
promodel <- lm(range_size ~ abs_latitude, data=procella)
summary(promodel)
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
promodel <- lm(range_size ~ abs_latitude, data=procella)
summary(promodel)
prosizemodel <- lm(log_BM ~ abs_latitude, data=procella)
procella$log_BM <- log(procella$body_mass)
View(procella)
procella$log_BM <- log(procella$mass)
prosizemodel <- lm(log_BM ~ abs_latitude, data=procella)
summary(prosizemodel)
prosizepgls <- pgls(log_BM ~ abs_latitude, data=procomp, lambda="ML")
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
prosizepgls <- pgls(log_BM ~ abs_latitude, data=procomp, lambda="ML")
summary(prosizepgls)
citation("caper")
prorangepgls <- pgls(range_size ~ abs_latitude, data=procomp, lambda="ML")
summary(prorangepgls)
summary(propgls)
range <- seq(0,90,by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- as.numberic(as.character(procella$lat.bins))
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
species_richness <- count(procella, lat.bins)
citation("dplyr")
library(dplyr)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
species_richness
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
summary(accip_model)
View(species_richness)
View(procella)
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
prorangelm <- lm(range_size ~ abs_latitude, data=procella)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(range_size ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
prorangelm <- lm(range_size ~ abs_latitude, data=procella)
summary(prorangelm)
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
library(ggplot2)
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
procella$log_BM <- log(procella$mass)
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
bodyscatter <- ggplot(procella, aes(x=abs_latitude,y=log_BM)) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log body mass (g)") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
bodyscatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x="Absolute latitude",y="Log range size (km^2)") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab = ("Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
ylab(bquote("Log Range Size")(km^2))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
ylab("Log range size (km^2)")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
xlab("Absolute latitude") +
ylab("Log range size (km"^2")")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('Log range size (km'~(^2)')'), x = "Absolute latitude")
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('Log range size (km'~(^2)), x = "Absolute latitude")
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(x = bquote('x axis'~(Å^2)), y = "y axis")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "absolute latitude")
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
rangescatter <- ggplot(procella, aes(x=abs_latitude,y=log(range_size))) +
geom_point(size=5,shape=18,colour="purple4") +
geom_smooth(method=lm,se=FALSE,linewidth=3) +
labs(y = bquote('Log range size'~(km^2)), x = "Absolute latitude") +
theme(axis.text=element_text(size=18),axis.title=element_text(size=20))
rangescatter
setwd("~/Imp Stuff/Arrrrrr/Code")
library(ape) #phylog
library(caper)
library(phytools)
birddata <- read.csv("../data/BCB/avonet_data.csv", header = TRUE)
procella <- subset(birddata, birddata$jetz_order == "Procellariiformes")
procella <- na.omit(procella)
procella$abs_latitude <- abs(procella$centroid_latitude)
procella$log_Range <- log(procella$range_size)
bird_tree <- read.tree("../data/BCB/all_birds.tre")
drop_tips <- setdiff(bird_tree$tip.label, procella$jetz_name)
protree <- drop.tip(bird_tree, drop_tips)
procomp <- comparative.data(phy = protree, data = procella, names.col = "jetz_name")
propgls <- pgls(log_Range ~ abs_latitude, data = procomp, lambda = "ML")
summary(propgls)
prorangelm <- lm(log_Range ~ abs_latitude, data=procella)
summary(prorangelm)
summary(propgls)
summary(prorangelm)
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
range <- seq(0,90,by=5)
labels <- seq(5,90,5)
procella$lat.bins <- cut(procella$abs_latitude,breaks=range,labels=labels)
procella$lat.bins <- as.numeric(as.character(procella$lat.bins))
library(dplyr)
species_richness <- count(procella, lat.bins)
colnames(species_richness)[2] <- "richness"
accip_model <- glm(richness ~ lat.bins, data = species_richness, family = "poisson")
summary(accip_model)
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
plot(S_data, V_data)
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
summary(MM_model)
confint(MM_model)
rm(list = ls())
graphics.off()
#GENERATE DATA
S_data <- seq(1,50,5)
S_data
#V = VMAXS/KM+S
#GENERATE REACTION VELOCITY RESPONSE, VMAX = 12.5 K_M = 7.1
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
#FIT MODEL TO DATA
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
anova(MM_model)
confint(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model)
coef(MM_model2)
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
#plot fit
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
MM_model4 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12.96, K_M = 10.61))
> install.packages("minpack.lm")
install.packages("minpack.lm")
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
coef(MM_model5)
MM_model6 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
MM_model7 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
MM_model8 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1), lower=c(0.4,0.4), upper=c(100,100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start =  list(V_max = 0.5, K_M = 0.5), lower=c(0.4,0.4), upper=c(20,20))
hist(residuals(MM_model6))
MyData <- read.csv("../data/GenomeSize.csv") # using relative path assuming that your working directory is "code"
head(MyData)
Data2Fit <- subset(MyData,Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),] # remove NA's
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight, xlab = "Body Length", ylab = "Body Weight")
library("ggplot2")
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) +
geom_point(size = (3),color="red") + theme_bw() +
labs(y="Body mass (mg)", x = "Wing length (mm)")
nrow(Data2Fit)
PowFit <- nlsLM(BodyWeight ~ a * TotalLength^b, data = Data2Fit, start = list(a = .1, b = .1))
powMod <- function(x, a, b) {
return(a * x^b)
}
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength,a,b), data = Data2Fit, start = list(a = .1, b = .1))
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200)
coef(PowFit)["a"]
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths,coef(PowFit)["a"],coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5)
summary(PowFit)
print(confint(PowFit))
hist(residuals(PowFit))
library(ggplot2)
library(minpack.lm)
rm(list = ls())
setwd("~/GitHub/CMEECoursework/MiniProject/Code")
dataMod <- read.csv("../Data/LogisticGrowthDataMod.csv")
unique(dataMod$Medium)
library(ggplot2)
library(minpack.lm)
rm(list = ls())
setwd("~/GitHub/CMEECoursework/MiniProject/Code")
dataMod <- read.csv("../Data/LogisticGrowthDataMod.csv")
#### Define Gompertz Model
gompertz_model <- function(t, r_max, K, N_0, t_lag){
return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
# Classify Medium as Artificial vs. Real-world
artificial_media <- c("TSB", "ESAW", "TGE agar", "MRS broth", "APT Broth", "MRS")
dataMod$Environment <- ifelse(dataMod$Medium %in% artificial_media, "Artificial", "Real-world")
# List of unique ID_num
unique_ids <- unique(dataMod$ID_num)
plot_directory <- "../Results"
# Initialize counters
results <- data.frame(Environment = character(), Model = character(), AIC_wins = integer(), BIC_wins = integer())
# LOOP START
for(id in unique_ids) {
# Make subset
subset_data <- subset(dataMod, ID_num == id)
env_type <- unique(subset_data$Environment)  # Get environment type
# Fit Linear Model
lm_fit <- lm(log_PopBio ~ Time, data = subset_data)
# AIC / BIC for LM
lm_AIC <- AIC(lm_fit)
lm_BIC <- BIC(lm_fit)
# Define starting parameters for Gompertz
N_0_start <- min(subset_data$log_PopBio)
K_start <- max(subset_data$log_PopBio)
r_max_start <- coef(lm_fit)["Time"]
t_lag_start <- min(subset_data$Time)
# Try to fit Gompertz Model
fit_gomping_time <- tryCatch({
nlsLM(log_PopBio ~ gompertz_model(t = Time, r_max, K, N_0, t_lag),
data = subset_data,
start = list(t_lag = t_lag_start, r_max = r_max_start, N_0 = N_0_start, K = K_start),
control = nls.lm.control(maxiter = 100))
}, error = function(e) {
message(paste("Error fitting Gompertz for ID:", id, ":", e$message))
return(NULL)
})
# If Gompertz fit is successful, compare AIC/BIC
if (!is.null(fit_gomping_time)) {
gompy_AIC <- AIC(fit_gomping_time)
gompy_BIC <- BIC(fit_gomping_time)
# AIC comparison
AIC_winner <- ifelse(lm_AIC < gompy_AIC, "Linear", "Gompertz")
# BIC comparison
BIC_winner <- ifelse(lm_BIC < gompy_BIC, "Linear", "Gompertz")
# Store results
results <- rbind(results, data.frame(Environment = env_type, Model = AIC_winner, AIC_wins = 1, BIC_wins = 0))
results <- rbind(results, data.frame(Environment = env_type, Model = BIC_winner, AIC_wins = 0, BIC_wins = 1))
# Create DataFrame of Gompertz line for this ID
time_seq <- seq(min(subset_data$Time), max(subset_data$Time), length.out = 100)
gompy_predation <- predict(fit_gomping_time, newdata = data.frame(Time = time_seq))
gompertz_df <- data.frame(Time = time_seq, log_PopBio = gompy_predation)
# Plot with LM and Gompertz
plot <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
geom_point(color = "gray", alpha = 0.75) +
geom_smooth(method = "lm", color = "darkred", linetype = "dashed", se = FALSE) +
geom_line(data = gompertz_df, aes(x = Time, y = log_PopBio), color = "darkblue", size = 1) +  # Gompertz model line
theme_minimal() +
labs(title = paste("Bacterial Growth for ID: ", id), x = "Time (hours)", y = "Log Population")
# Save plot
filename <- paste0(plot_directory, "/Bacterial_Growth_Plot_ID_", id, ".pdf")
ggsave(filename, plot = plot, width = 8, height = 6, dpi = 300)
} else {
message(paste("Skipping ID:", id, "due to Gompertz fitting failure"))
}
}
# Summarize and print results
summary_results <- aggregate(cbind(AIC_wins, BIC_wins) ~ Environment + Model, data = results, sum)
print(summary_results)
# Summarize and print results
ssummary_results <- aggregate(cbind(AIC_wins, BIC_wins) ~ Environment + Model,
data = results, sum, drop = FALSE)
print(summary_results)
# Summarize and print results
summary_results <- aggregate(cbind(AIC_wins, BIC_wins) ~ Environment + Model,
data = results, sum, drop = FALSE)
print(summary_results)
write.csv(summary_results, file = "../Results/lm_vs_gompertz_summary.csv", row.names = FALSE)
